
from PyQt5 import QtCore

DEFAULTS = dict(
    camera=dict(camRadius=3.2, camHeightDeg=15, camTiltDeg=0, omegaDegPerSec=20, fov=600),
    geometry=dict(
        topology="uv_sphere",
        R=1.0, lat=64, lon=64, N=4096, phi_g=3.88322,
        R_major=1.2, r_minor=0.45,
        eps1=1.0, eps2=1.0, ax=1.0, ay=1.0, az=1.0,
        geo_level=1, mobius_w=0.4,
        arch_a=0.0, arch_b=0.6, theta_max=6.28318,
        log_a=0.2, log_b=0.15,
        rose_k=4.0,
        sf2_m=6.0, sf2_a=1.0, sf2_b=1.0, sf2_n1=0.5, sf2_n2=0.5, sf2_n3=0.5,
        density_pdf="1",
        poisson_dmin=0.05,
        lissajous_a=3.0, lissajous_b=2.0, lissajous_phase=0.0,
        vogel_k=2.3999632,
        se_n1=1.0, se_n2=1.0,
        half_height=1.0,
        noisy_amp=0.1, noisy_freq=3.0, noisy_gain=1.0, noisy_omega=0.0,
        sph_terms="2,0,0.4;3,2,0.2",
        weight_map="1",
        R_major2=0.8,
        torus_knot_p=3, torus_knot_q=2,
        strip_w=0.4, strip_n=2,
        blob_noise_amp=0.25, blob_noise_scale=2.0,
        gyroid_scale=1.0, gyroid_thickness=0.05, gyroid_c=0.0,
        schwarz_scale=1.0, schwarz_iso=0.0,
        heart_scale=1.0,
        metaballs_centers="0,0,0",
        metaballs_radii="0.6",
        metaballs_iso=1.0,
        polyhedron_data="",
        df_ops="sphere(1.0)",
        sf3_m1=3.0, sf3_m2=3.0, sf3_m3=3.0,
        sf3_n1=0.5, sf3_n2=0.5, sf3_n3=0.5,
        sf3_a=1.0, sf3_b=1.0, sf3_scale=1.0,
        helix_r=0.4, helix_pitch=0.3, helix_turns=3.0,
        lissajous3d_Ax=1.0, lissajous3d_Ay=1.0, lissajous3d_Az=1.0,
        lissajous3d_wx=3.0, lissajous3d_wy=2.0, lissajous3d_wz=5.0,
        lissajous3d_phi=0.0,
        viviani_a=1.0,
        lic_N=12, lic_steps=180, lic_h=0.05,
        stream_N=12, stream_steps=220,
        geo_graph_level=2,
        rgg_nodes=400, rgg_radius=0.2,
        rings_count=5, ring_points=96,
        hex_step=0.2, hex_nx=12, hex_ny=12,
        voronoi_N=50, voronoi_bbox="-1,1,-1,1"
    ),
    appearance=dict(
        color="#00C8FF", colors="#00C8FF@0,#FFFFFF@1", opacity=1.0, px=2.0,
        palette="uniform", paletteK=2,
        h0=200.0, dh=0.0, wh=0.0,
        blendMode="source-over", shape="circle",
        alphaDepth=0.0,
        noiseScale=1.0, noiseSpeed=0.0,
        pxModMode="none", pxModAmp=0.0, pxModFreq=0.0, pxModPhaseDeg=0.0,
    ),
    dynamics=dict(
        rotX=0.0, rotY=0.0, rotZ=0.0, pulseA=0.0, pulseW=1.0,
        pulsePhaseDeg=0.0, rotPhaseDeg=0.0, rotPhaseMode="none"
    ),
    distribution=dict(
        densityMode="uniform",
        sampler="direct",
        dmin=0.0,
        dmin_px=0.0,
        orientXDeg=0,
        orientYDeg=0,
        orientZDeg=0,
        maskMode="none",
        maskSoftness=0.2,
        maskAnimate=0.0,
        noiseDistortion=0.0,
        densityPulse=0.0,
        clusterCount=1,
        clusterSpread=0.0,
        repelForce=0.0,
        noiseWarp=0.0,
        fieldFlow=0.0,
        pr="uniform_area"
    ),
    mask=dict(
        enabled=False, mode="none", angleDeg=30.0,
        bandHalfDeg=20.0, lonCenterDeg=0.0, lonWidthDeg=30.0,
        softDeg=10.0, invert=False
    ),
    system=dict(Nmax=50000, dprClamp=2.0, depthSort=True, transparent=True)
)

PROFILE_PRESETS = {
    "Aurora Sphérique": dict(
        camera=dict(camRadius=4.8, camHeightDeg=32, camTiltDeg=-12, omegaDegPerSec=10, fov=650),
        geometry=dict(topology="fibo_sphere", R=1.15, N=15000, phi_g=2.39996),
        appearance=dict(
            palette="gradient_linear",
            colors="#4CC9F0@0,#4895EF@0.35,#560BAD@1",
            opacity=0.88,
            px=2.6,
            blendMode="screen",
        ),
        dynamics=dict(rotY=9.5, rotPhaseMode="by_radius", rotPhaseDeg=120.0),
        distribution=dict(sampler="blue_noise", dmin=0.04, orientYDeg=18, orientZDeg=12, noiseDistortion=0.14),
    ),
    "Anneau Néon": dict(
        camera=dict(camRadius=5.5, camHeightDeg=45, camTiltDeg=-18, omegaDegPerSec=14, fov=540),
        geometry=dict(topology="torus", R=1.0, lat=96, lon=128, R_major=1.8, r_minor=0.38),
        appearance=dict(
            palette="stripe_longitude",
            colors="#00F5D4@0,#560BAD@0.5,#F72585@1",
            opacity=0.92,
            px=2.2,
        ),
        dynamics=dict(rotX=4.0, rotZ=8.0, rotPhaseMode="by_index", rotPhaseDeg=80.0),
        distribution=dict(densityMode="centered", sampler="blue_noise", dmin=0.05, orientZDeg=45),
    ),
    "Spirale Galactique": dict(
        camera=dict(camRadius=6.0, camHeightDeg=70, camTiltDeg=-58, omegaDegPerSec=6, fov=720),
        geometry=dict(
            topology="archimede_spiral",
            R=2.4,
            N=12000,
            arch_a=0.08,
            arch_b=0.23,
            theta_max=18.0,
        ),
        appearance=dict(palette="gradient_radial", colors="#F9C74F@0,#F9844A@0.45,#F94144@1", opacity=0.9, px=1.8),
        dynamics=dict(rotZ=14.0),
        distribution=dict(densityMode="edges", sampler="weighted_sampling", orientZDeg=-15, noiseWarp=0.22),
    ),
    "Constellation Libre": dict(
        camera=dict(camRadius=7.0, camHeightDeg=38, camTiltDeg=-8, omegaDegPerSec=4, fov=520),
        geometry=dict(topology="random_geometric_graph", R=1.5, rgg_nodes=520, rgg_radius=0.32),
        appearance=dict(palette="random_from_list", colors="#FFFFFF@0,#A0C4FF@0.5,#BDB2FF@1", opacity=0.75, px=2.0),
        dynamics=dict(rotY=6.0, rotZ=2.0),
        distribution=dict(densityMode="uniform", sampler="direct", orientYDeg=12, orientZDeg=24, fieldFlow=0.18),
    ),
    "Ruban Möbius": dict(
        camera=dict(camRadius=4.2, camHeightDeg=28, camTiltDeg=-22, omegaDegPerSec=12, fov=560),
        geometry=dict(topology="mobius", R=1.0, lat=64, lon=256, mobius_w=0.55),
        appearance=dict(palette="gradient_linear", colors="#FFE066@0,#FAB005@0.5,#FF922B@1", opacity=0.95, px=2.4),
        dynamics=dict(rotX=6.0, rotY=4.5, rotPhaseMode="by_index", rotPhaseDeg=60.0),
        distribution=dict(densityMode="uniform", sampler="blue_noise", orientXDeg=15, orientZDeg=30, clusterSpread=0.12),
    ),
    "Nuage Organique": dict(
        camera=dict(camRadius=4.6, camHeightDeg=34, camTiltDeg=-16, omegaDegPerSec=9, fov=600),
        geometry=dict(topology="blob", R=1.15, lat=96, lon=160, blob_noise_amp=0.42, blob_noise_scale=2.6),
        appearance=dict(palette="by_noise", colors="#7BF1A8@0,#43AA8B@1", opacity=0.82, px=2.8, noiseScale=0.6, noiseSpeed=0.7),
        dynamics=dict(rotX=3.0, rotY=5.0, rotPhaseMode="by_radius", rotPhaseDeg=140.0, pulseA=0.12, pulseW=1.4),
        distribution=dict(densityMode="noise_field", sampler="weighted_sampling", dmin=0.02, noiseDistortion=0.28, noiseWarp=0.35),
    ),
    "Gyroid Chromatique": dict(
        camera=dict(camRadius=5.2, camHeightDeg=36, camTiltDeg=-10, omegaDegPerSec=11, fov=560),
        geometry=dict(topology="gyroid", R=1.1, N=18000, gyroid_scale=1.5, gyroid_thickness=0.08, gyroid_c=0.2),
        appearance=dict(palette="directional", h0=210.0, dh=120.0, wh=6.0, opacity=0.78, px=2.1),
        dynamics=dict(rotX=5.0, rotY=9.0, rotPhaseMode="by_radius", rotPhaseDeg=180.0),
        distribution=dict(densityMode="uniform", sampler="blue_noise", dmin=0.03, orientXDeg=-25, orientZDeg=25, maskMode="north_cap", maskSoftness=0.4),
        mask=dict(enabled=True, mode="north_cap", angleDeg=42.0, softDeg=16.0, invert=False),
    ),
    "Fleur Polaire": dict(
        camera=dict(camRadius=4.0, camHeightDeg=64, camTiltDeg=-52, omegaDegPerSec=7, fov=640),
        geometry=dict(topology="rose_curve", R=2.2, N=8000, rose_k=6.0, theta_max=16.0),
        appearance=dict(palette="gradient_radial", colors="#FFBE0B@0,#FB5607@0.5,#FF006E@1", opacity=0.88, px=1.6),
        dynamics=dict(rotZ=18.0),
        distribution=dict(densityMode="edges", sampler="weighted_sampling", orientXDeg=12, orientZDeg=-18, densityPulse=0.32),
    ),
    "Cyclone Orbital": dict(
        camera=dict(camRadius=6.2, camHeightDeg=48, camTiltDeg=-20, omegaDegPerSec=5, fov=600),
        geometry=dict(topology="stream_on_torus", R=1.0, stream_N=36, stream_steps=260, R_major=1.5, r_minor=0.42),
        appearance=dict(palette="every_other", colors="#90E0EF@0,#03045E@1", opacity=0.85, px=1.9),
        dynamics=dict(rotX=12.0, rotZ=6.0, rotPhaseMode="by_index", rotPhaseDeg=45.0),
        distribution=dict(densityMode="centered", sampler="direct", orientYDeg=-35, orientZDeg=40, fieldFlow=0.24),
    ),
    "Hélice Pulsar": dict(
        camera=dict(camRadius=4.4, camHeightDeg=30, camTiltDeg=-8, omegaDegPerSec=16, fov=520),
        geometry=dict(topology="helix", R=1.0, N=1600, helix_r=0.55, helix_pitch=0.32, helix_turns=5.0),
        appearance=dict(palette="gradient_linear", colors="#FFE066@0,#FAA307@0.5,#FF6200@1", opacity=0.94, px=2.0),
        dynamics=dict(rotX=20.0, rotY=4.0, rotPhaseMode="by_index", rotPhaseDeg=30.0),
        distribution=dict(densityMode="uniform", sampler="direct", orientXDeg=12, orientYDeg=18, orientZDeg=90),
    ),
    "Klein Nocturne": dict(
        camera=dict(camRadius=5.8, camHeightDeg=34, camTiltDeg=-18, omegaDegPerSec=8, fov=540),
        geometry=dict(topology="klein_bottle", R=1.0, lat=96, lon=128, R_major=1.6, r_minor=0.33),
        appearance=dict(palette="gradient_linear", colors="#7209B7@0,#4361EE@0.6,#4895EF@1", opacity=0.83, px=2.1),
        dynamics=dict(rotY=7.5, rotZ=5.0, rotPhaseMode="by_radius", rotPhaseDeg=150.0),
        distribution=dict(densityMode="uniform", sampler="blue_noise", orientXDeg=-18, orientZDeg=32, repelForce=0.12),
    ),
    "Nœud Prismatique": dict(
        camera=dict(camRadius=5.0, camHeightDeg=38, camTiltDeg=-15, omegaDegPerSec=13, fov=560),
        geometry=dict(
            topology="torus_knot",
            R=1.0,
            N=8000,
            R_major=1.4,
            r_minor=0.36,
            torus_knot_p=3,
            torus_knot_q=5,
        ),
        appearance=dict(palette="every_kth", colors="#3A86FF@0,#8338EC@0.5,#FF006E@1", paletteK=5, opacity=0.9, px=1.8),
        dynamics=dict(rotX=10.0, rotY=6.0, rotPhaseMode="by_index", rotPhaseDeg=72.0),
        distribution=dict(densityMode="centered", sampler="blue_noise", dmin=0.045, orientYDeg=22, orientZDeg=60),
    ),
    "Graphe Astral": dict(
        camera=dict(camRadius=6.6, camHeightDeg=40, camTiltDeg=-10, omegaDegPerSec=5, fov=520),
        geometry=dict(topology="geodesic_graph", R=1.35, geo_graph_level=4),
        appearance=dict(palette="by_lat", h0=180.0, dh=160.0, wh=4.0, opacity=0.8, px=2.2),
        dynamics=dict(rotX=6.0, rotZ=6.0, rotPhaseMode="by_radius", rotPhaseDeg=200.0),
        distribution=dict(densityMode="uniform", sampler="direct", orientXDeg=10, orientYDeg=-14, orientZDeg=28, clusterCount=5, clusterSpread=0.24),
    ),
    "Réseau Hexa": dict(
        camera=dict(camRadius=6.0, camHeightDeg=68, camTiltDeg=-54, omegaDegPerSec=4, fov=680),
        geometry=dict(topology="hex_packing_plane", R=2.2, hex_step=0.26, hex_nx=18, hex_ny=14),
        appearance=dict(palette="stripe_longitude", colors="#2EC4B6@0,#FFBF69@0.5,#FF9F1C@1", opacity=0.92, px=1.6),
        dynamics=dict(rotZ=10.0),
        distribution=dict(densityMode="edges", sampler="weighted_sampling", orientXDeg=90, orientZDeg=0, dmin_px=6.0),
    ),
    "Tore Liquide": dict(
        camera=dict(camRadius=5.4, camHeightDeg=38, camTiltDeg=-18, omegaDegPerSec=9, fov=600),
        geometry=dict(topology="double_torus", R=1.05, lat=96, lon=128, R_major=1.7, R_major2=2.2, r_minor=0.32),
        appearance=dict(palette="gradient_linear", colors="#06D6A0@0,#118AB2@0.5,#073B4C@1", opacity=0.86, px=2.4),
        dynamics=dict(rotX=3.5, rotY=7.0, rotZ=4.5, rotPhaseMode="by_radius", rotPhaseDeg=120.0),
        distribution=dict(densityMode="uniform", sampler="blue_noise", dmin=0.038, orientXDeg=-22, orientYDeg=10, orientZDeg=48, densityPulse=0.18),
    ),
    "Superquadrique Prism": dict(
        camera=dict(camRadius=4.9, camHeightDeg=28, camTiltDeg=-6, omegaDegPerSec=11, fov=520),
        geometry=dict(topology="superquadric", R=1.2, lat=96, lon=96, eps1=0.5, eps2=0.5, ax=1.0, ay=0.7, az=1.3),
        appearance=dict(palette="gradient_linear", colors="#FFD166@0,#EF476F@0.5,#8338EC@1", opacity=0.9, px=2.3),
        dynamics=dict(rotX=4.0, rotY=8.0, rotPhaseMode="by_index", rotPhaseDeg=50.0),
        distribution=dict(densityMode="centered", sampler="weighted_sampling", orientXDeg=-18, orientYDeg=22, orientZDeg=30, repelForce=0.16),
    ),
    "Vague Viviani": dict(
        camera=dict(camRadius=4.2, camHeightDeg=36, camTiltDeg=-12, omegaDegPerSec=15, fov=500),
        geometry=dict(topology="viviani_curve", R=1.0, N=3600, viviani_a=1.2),
        appearance=dict(palette="gradient_linear", colors="#9BF6FF@0,#72EFDD@0.5,#80FFDB@1", opacity=0.87, px=1.8),
        dynamics=dict(rotX=14.0, rotY=4.0, rotPhaseMode="by_index", rotPhaseDeg=36.0),
        distribution=dict(densityMode="uniform", sampler="direct", orientXDeg=24, orientYDeg=-30, orientZDeg=60, maskMode="band", maskSoftness=0.35),
        mask=dict(enabled=True, mode="band", bandHalfDeg=28.0, angleDeg=64.0, softDeg=18.0, invert=False),
    ),
    "Flux LIC": dict(
        camera=dict(camRadius=5.8, camHeightDeg=44, camTiltDeg=-20, omegaDegPerSec=7, fov=620),
        geometry=dict(topology="line_integral_convolution_sphere", R=1.0, lic_N=18, lic_steps=260, lic_h=0.06),
        appearance=dict(palette="directional", h0=120.0, dh=220.0, wh=5.5, opacity=0.82, px=2.0),
        dynamics=dict(rotX=2.5, rotY=12.0, rotPhaseMode="by_radius", rotPhaseDeg=210.0),
        distribution=dict(densityMode="noise_field", sampler="weighted_sampling", orientXDeg=-30, orientYDeg=18, orientZDeg=36, noiseWarp=0.4, fieldFlow=0.3),
    ),
    "Champ Directionnel": dict(
        camera=dict(camRadius=5.0, camHeightDeg=26, camTiltDeg=-8, omegaDegPerSec=6, fov=500),
        geometry=dict(topology="weighted_sphere", R=1.05, N=14000, weight_map="sin(theta)*cos(2*phi)"),
        appearance=dict(palette="directional", h0=45.0, dh=180.0, wh=3.5, opacity=0.84, px=2.4),
        dynamics=dict(rotY=10.0, rotPhaseMode="by_radius", rotPhaseDeg=160.0),
        distribution=dict(densityMode="uniform", sampler="weighted_sampling", orientXDeg=8, orientYDeg=-18, orientZDeg=22, densityPulse=0.26),
    ),
    "Voronoï Pop": dict(
        camera=dict(camRadius=6.4, camHeightDeg=62, camTiltDeg=-48, omegaDegPerSec=5, fov=700),
        geometry=dict(topology="voronoi_seeds", R=2.0, voronoi_N=120, voronoi_bbox="-1.2,1.2,-1.2,1.2"),
        appearance=dict(palette="random_from_list", colors="#FF595E@0,#FFCA3A@0.5,#8AC926@1,#1982C4@1", opacity=0.93, px=1.5),
        dynamics=dict(rotZ=16.0),
        distribution=dict(densityMode="edges", sampler="direct", orientXDeg=90, orientZDeg=-45, clusterCount=8, clusterSpread=0.3, dmin_px=8.0),
    ),
}

PROFILE_PRESET_DESCRIPTIONS = {
    "Aurora Sphérique": "Fibonacci dense baignée de teintes froides et d’une rotation douce.",
    "Anneau Néon": "Tore lumineux à bandes contrastées pour des rotations rapides.",
    "Spirale Galactique": "Grande spirale plane inspirée des bras galactiques.",
    "Constellation Libre": "Graphe aléatoire léger rappelant un ciel étoilé moderne.",
    "Ruban Möbius": "Ruban torsadé coloré avec progression tonale chaude.",
    "Nuage Organique": "Masse organique bruitée aux transitions vertes.",
    "Gyroid Chromatique": "Surface triplement périodique filtrée par un masque polaire.",
    "Fleur Polaire": "Rosace polaire éclatante idéale pour les compositions florales.",
    "Cyclone Orbital": "Flux autour d’un tore soulignant la dynamique spiralée.",
    "Hélice Pulsar": "Courbe hélicoïdale nerveuse et très mobile.",
    "Klein Nocturne": "Immersion de Klein soulignée par des bleus profonds.",
    "Nœud Prismatique": "Nœud torique vibrant à alternance chromatique.",
    "Graphe Astral": "Réseau géodésique coloré suivant les latitudes.",
    "Réseau Hexa": "Pavage hexagonal lumineux vu en plongée.",
    "Tore Liquide": "Double tore fluide avec palette turquoise sombre.",
    "Superquadrique Prism": "Superquadrique étirée aux reflets chauds et froids.",
    "Vague Viviani": "Boucle de Viviani avec bande de masque animée.",
    "Flux LIC": "Tracés LIC enveloppants accentués par un gradient directionnel.",
    "Champ Directionnel": "Sphère pondérée orientée par un gradient chromatique.",
    "Voronoï Pop": "Motif Voronoï saturé pour des compositions graphiques.",
}

TOOLTIPS = {
    "camera.camRadius":"Détermine la distance entre la caméra et le centre de la scène.",
    "camera.camHeightDeg":"Place la caméra plus haut ou plus bas sur son orbite.",
    "camera.camTiltDeg":"Incline la caméra vers le haut ou vers le bas.",
    "camera.omegaDegPerSec":"Fait tourner automatiquement la caméra autour de la scène.",
    "camera.fov":"Contrôle l’angle de vue : petit pour zoomer, grand pour élargir.",
    "geometry.topology":"Sélectionne la forme de base utilisée pour disposer les particules.",
    "geometry.R":"Agrandit ou réduit toute la forme sans changer sa structure.",
    "geometry.lat":"Nombre de bandes horizontales utilisées pour dessiner la forme.",
    "geometry.lon":"Nombre de colonnes verticales utilisées pour dessiner la forme.",
    "geometry.N":"Nombre total de points générés pour les distributions spirales.",
    "geometry.phi_g":"Décalage progressif entre les points pour les spirales naturelles.",
    "geometry.R_major":"Rayon extérieur du tore.",
    "geometry.r_minor":"Épaisseur du tube du tore.",
    "geometry.eps1":"Arrondi la forme superquadrique sur l’axe horizontal.",
    "geometry.eps2":"Arrondi la forme superquadrique sur l’axe vertical.",
    "geometry.ax":"Étire la superquadrique sur l’axe X.",
    "geometry.ay":"Étire la superquadrique sur l’axe Y.",
    "geometry.az":"Étire la superquadrique sur l’axe Z.",
    "geometry.geo_level":"Affinage du maillage de l’icosaèdre.",
    "geometry.mobius_w":"Largeur du ruban pour la bande de Möbius.",
    "geometry.arch_a":"Contrôle le rayon de départ de la spirale d’Archimède.",
    "geometry.arch_b":"Définit l’écartement entre les spires de la spirale d’Archimède.",
    "geometry.theta_max":"Angle total parcouru par les spirales planes.",
    "geometry.log_a":"Facteur d’échelle initiale de la spirale logarithmique.",
    "geometry.log_b":"Taux de croissance exponentielle de la spirale logarithmique.",
    "geometry.rose_k":"Nombre de pétales de la rosace polaire.",
    "geometry.sf2_m":"Paramètre m de la superformule 2D (symétries).",
    "geometry.sf2_a":"Paramètre a de la superformule 2D (échelle horizontale).",
    "geometry.sf2_b":"Paramètre b de la superformule 2D (échelle verticale).",
    "geometry.sf2_n1":"Exposant n1 de la superformule 2D.",
    "geometry.sf2_n2":"Exposant n2 de la superformule 2D.",
    "geometry.sf2_n3":"Exposant n3 de la superformule 2D.",
    "geometry.density_pdf":"Fonction de densité radiale utilisée pour répartir les points sur le disque.",
    "geometry.poisson_dmin":"Distance minimale entre deux points du disque de Poisson.",
    "geometry.lissajous_a":"Fréquence horizontale de la courbe de Lissajous plane.",
    "geometry.lissajous_b":"Fréquence verticale de la courbe de Lissajous plane.",
    "geometry.lissajous_phase":"Décalage de phase (rad) pour la courbe de Lissajous plane.",
    "geometry.vogel_k":"Facteur de rotation entre deux points successifs sur la spirale sphérique.",
    "geometry.se_n1":"Exposant n1 de la superellipsoïde.",
    "geometry.se_n2":"Exposant n2 de la superellipsoïde.",
    "geometry.half_height":"Facteur d’écrasement de la demi-sphère.",
    "geometry.noisy_amp":"Amplitude du bruit radial appliqué à la sphère.",
    "geometry.noisy_freq":"Fréquence du bruit sphérique.",
    "geometry.noisy_gain":"Gain multiplicatif du bruit fractal.",
    "geometry.noisy_omega":"Déphasage angulaire du bruit sphérique.",
    "geometry.sph_terms":"Liste de termes l,m,amplitude pour les harmoniques sphériques (format l,m,a).",
    "geometry.weight_map":"Expression pondérant la densité de points sur la sphère (variables theta,phi).",
    "geometry.R_major2":"Rayon majeur du second tore concentrique.",
    "geometry.torus_knot_p":"Nombre d’enroulements autour de l’axe majeur du nœud torique.",
    "geometry.torus_knot_q":"Nombre d’enroulements autour du tube du nœud torique.",
    "geometry.strip_w":"Largeur du ruban torsadé.",
    "geometry.strip_n":"Nombre de torsions complètes du ruban.",
    "geometry.blob_noise_amp":"Amplitude de la perturbation bruitée d’un blob.",
    "geometry.blob_noise_scale":"Échelle spatiale du bruit appliqué au blob.",
    "geometry.gyroid_scale":"Échelle spatiale de la surface de gyroid.",
    "geometry.gyroid_thickness":"Épaisseur de la coquille autour de l’isosurface du gyroid.",
    "geometry.gyroid_c":"Décalage de l’iso-valeur du gyroid.",
    "geometry.schwarz_scale":"Échelle de la surface minimale de Schwarz.",
    "geometry.schwarz_iso":"Valeur iso utilisée pour l’extraction de la surface de Schwarz.",
    "geometry.heart_scale":"Échelle globale de la forme de cœur implicite.",
    "geometry.polyhedron_data":"Définition personnalisée d’un polyèdre (JSON vertices/faces).",
    "geometry.metaballs_centers":"Liste des centres des métaballes (x,y,z séparés par des virgules).",
    "geometry.metaballs_radii":"Rayons associés aux métaballes (séparés par des virgules).",
    "geometry.metaballs_iso":"Seuil iso-surface pour les métaballes.",
    "geometry.df_ops":"Script de combinaisons SDF (sphere(r), box(x,y,z), union(a,b), sub(a,b), etc.).",
    "geometry.sf3_m1":"Paramètre m1 de la superformule 3D.",
    "geometry.sf3_m2":"Paramètre m2 de la superformule 3D.",
    "geometry.sf3_m3":"Paramètre m3 de la superformule 3D.",
    "geometry.sf3_n1":"Exposant n1 de la superformule 3D.",
    "geometry.sf3_n2":"Exposant n2 de la superformule 3D.",
    "geometry.sf3_n3":"Exposant n3 de la superformule 3D.",
    "geometry.sf3_a":"Paramètre a (échelle latitude) de la superformule 3D.",
    "geometry.sf3_b":"Paramètre b (échelle longitude) de la superformule 3D.",
    "geometry.sf3_scale":"Facteur global appliqué à la superformule 3D.",
    "geometry.helix_r":"Rayon de l’hélice 3D.",
    "geometry.helix_pitch":"Pas vertical de l’hélice par tour.",
    "geometry.helix_turns":"Nombre de tours de l’hélice.",
    "geometry.lissajous3d_Ax":"Amplitude suivant X pour la courbe de Lissajous 3D.",
    "geometry.lissajous3d_Ay":"Amplitude suivant Y pour la courbe de Lissajous 3D.",
    "geometry.lissajous3d_Az":"Amplitude suivant Z pour la courbe de Lissajous 3D.",
    "geometry.lissajous3d_wx":"Fréquence suivant X de la courbe de Lissajous 3D.",
    "geometry.lissajous3d_wy":"Fréquence suivant Y de la courbe de Lissajous 3D.",
    "geometry.lissajous3d_wz":"Fréquence suivant Z de la courbe de Lissajous 3D.",
    "geometry.lissajous3d_phi":"Décalage de phase commun des composantes de Lissajous 3D.",
    "geometry.viviani_a":"Rayon du tore générateur de la courbe de Viviani.",
    "geometry.lic_N":"Nombre de lignes intégrées sur la sphère.",
    "geometry.lic_steps":"Nombre d’étapes d’intégration pour chaque ligne LIC.",
    "geometry.lic_h":"Pas de temps utilisé pour l’intégration LIC.",
    "geometry.stream_N":"Nombre de lignes intégrées sur le tore.",
    "geometry.stream_steps":"Nombre d’étapes pour l’intégration sur le tore.",
    "geometry.geo_graph_level":"Niveau de subdivision du graphe géodésique.",
    "geometry.rgg_nodes":"Nombre de points du graphe géométrique aléatoire.",
    "geometry.rgg_radius":"Distance de connexion pour le graphe géométrique aléatoire.",
    "geometry.rings_count":"Nombre d’anneaux concentriques générés.",
    "geometry.ring_points":"Nombre de points par anneau.",
    "geometry.hex_step":"Espacement entre les points du pavage hexagonal.",
    "geometry.hex_nx":"Nombre de colonnes du pavage hexagonal.",
    "geometry.hex_ny":"Nombre de lignes du pavage hexagonal.",
    "geometry.voronoi_N":"Nombre de graines utilisées pour le diagramme de Voronoï.",
    "geometry.voronoi_bbox":"Boîte englobante (xmin,xmax,ymin,ymax) pour les graines de Voronoï.",
    "appearance.color":"Couleur principale des particules.",
    "appearance.colors":"Couleurs listées avec leur position pour créer un dégradé personnalisé.",
    "appearance.opacity":"Rend les particules plus ou moins transparentes.",
    "appearance.px":"Taille moyenne des particules en pixels.",
    "appearance.palette":"Mode d’attribution des couleurs.",
    "appearance.paletteK":"Fréquence de répétition du motif dans les palettes répétées.",
    "appearance.blendMode":"Définit comment les particules se mélangent entre elles et avec le fond.",
    "appearance.shape":"Choix de la forme de chaque particule.",
    "appearance.alphaDepth":"Atténue la visibilité des particules éloignées.",
    "appearance.h0":"Couleur de départ pour les palettes HSL animées.",
    "appearance.dh":"Amplitude de variation de la couleur pour les palettes HSL.",
    "appearance.wh":"Vitesse à laquelle la couleur HSL change.",
    "appearance.noiseScale":"Taille des détails colorés générés par le bruit.",
    "appearance.noiseSpeed":"Vitesse d’animation de ces détails colorés.",
    "appearance.pxModMode":"Active les variations automatiques de taille.",
    "appearance.pxModAmp":"Amplitude maximale des variations de taille.",
    "appearance.pxModFreq":"Rythme de répétition des variations de taille.",
    "appearance.pxModPhaseDeg":"Décalage du motif de variation de taille.",
    "dynamics.rotX":"Fait tourner le nuage autour de l’axe horizontal X.",
    "dynamics.rotY":"Fait tourner le nuage autour de l’axe vertical Y.",
    "dynamics.rotZ":"Fait tourner le nuage autour de l’axe longitudinal Z.",
    "dynamics.pulseA":"Amplitude de l’effet de respiration.",
    "dynamics.pulseW":"Vitesse de l’effet de respiration.",
    "dynamics.pulsePhaseDeg":"Décalage initial de l’animation de respiration.",
    "dynamics.rotPhaseMode":"Répartit un décalage de rotation selon l’index ou le rayon des particules.",
    "dynamics.rotPhaseDeg":"Amplitude maximale du décalage de rotation.",
    "distribution.densityMode":"Contrôle la pondération globale des points (uniforme, centre, bord, bruit).",
    "distribution.sampler":"Méthode de sous-échantillonnage à appliquer sur la géométrie générée.",
    "distribution.dmin":"Impose une distance minimale en 3D pour limiter les amas de points.",
    "distribution.dmin_px":"Évite que deux particules ne se projettent trop proches l’une de l’autre.",
    "distribution.orientXDeg":"Incline la distribution autour de l’axe X en la replaçant sur des angles prédéfinis.",
    "distribution.orientYDeg":"Pivote la distribution autour de l’axe vertical Y avec des angles usuels.",
    "distribution.orientZDeg":"Tourne la distribution autour de l’axe Z en la calant sur des orientations clés.",
    "distribution.maskMode":"Applique un masque spatial (calotte, bande, zone aléatoire).",
    "distribution.maskSoftness":"Élargit la transition du masque pour un bord plus doux.",
    "distribution.maskAnimate":"Anime le masque pour faire se déplacer la zone visible.",
    "distribution.noiseDistortion":"Déforme les positions selon un champ de bruit statique.",
    "distribution.densityPulse":"Fait pulser la distribution en contractant/étirant le nuage.",
    "distribution.clusterCount":"Nombre de groupes privilégiés pour la répartition.",
    "distribution.clusterSpread":"Détermine à quel point les points sont aspirés vers leurs centres de groupe.",
    "distribution.repelForce":"Force de répulsion locale pour lisser les amas restants.",
    "distribution.noiseWarp":"Amplitude de la déformation animée par le bruit.",
    "distribution.fieldFlow":"Intensité du champ de rotation appliqué aux positions.",
    "mask.enabled":"Active ou désactive le masquage des particules.",
    "mask.mode":"Définit la zone conservée ou masquée.",
    "mask.angleDeg":"Ouvre plus ou moins le masque en forme de calotte.",
    "mask.bandHalfDeg":"Largeur d’une demi-bande autour de l’équateur.",
    "mask.lonCenterDeg":"Centre le masque longitudinal.",
    "mask.lonWidthDeg":"Largeur totale du masque longitudinal.",
    "mask.softDeg":"Adoucit le bord du masque pour un fondu progressif.",
    "mask.invert":"Inverse la zone masquée et visible.",
    "system.Nmax":"Nombre maximum de particules autorisées simultanément.",
    "system.dprClamp":"Limite la résolution utilisée pour protéger les performances.",
    "system.depthSort":"Trie les particules pour un affichage correct avec la transparence.",
    "system.transparent":"Permet de rendre la fenêtre de prévisualisation transparente."
}
