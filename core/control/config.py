
from PyQt5 import QtCore

DEFAULTS = dict(
    camera=dict(camRadius=3.2, camHeightDeg=15, camTiltDeg=0, omegaDegPerSec=20, fov=600),
    geometry=dict(
        topology="uv_sphere",
        R=1.0, lat=64, lon=64, N=4096, phi_g=3.88322,
        R_major=1.2, r_minor=0.45,
        eps1=1.0, eps2=1.0, ax=1.0, ay=1.0, az=1.0,
        geo_level=1, mobius_w=0.4,
        trunc_ratio=0.333,
        stellated_scale=1.4,
        arch_a=0.0, arch_b=0.6, theta_max=6.28318,
        log_a=0.2, log_b=0.15,
        rose_k=4.0,
        sf2_m=6.0, sf2_a=1.0, sf2_b=1.0, sf2_n1=0.5, sf2_n2=0.5, sf2_n3=0.5,
        density_pdf="1",
        poisson_dmin=0.05,
        lissajous_a=3.0, lissajous_b=2.0, lissajous_phase=0.0,
        vogel_k=2.3999632,
        se_n1=1.0, se_n2=1.0,
        half_height=1.0,
        noisy_amp=0.1, noisy_freq=3.0, noisy_gain=1.0, noisy_omega=0.0,
        sph_terms="2,0,0.4;3,2,0.2",
        weight_map="1",
        R_major2=0.8,
        torus_knot_p=3, torus_knot_q=2,
        strip_w=0.4, strip_n=2,
        blob_noise_amp=0.25, blob_noise_scale=2.0,
        gyroid_scale=1.0, gyroid_thickness=0.05, gyroid_c=0.0,
        schwarz_scale=1.0, schwarz_iso=0.0,
        heart_scale=1.0,
        metaballs_centers="0,0,0",
        metaballs_radii="0.6",
        metaballs_iso=1.0,
        polyhedron_data="",
        poly_layers=1,
        poly_link_steps=0,
        df_ops="sphere(1.0)",
        sf3_m1=3.0, sf3_m2=3.0, sf3_m3=3.0,
        sf3_n1=0.5, sf3_n2=0.5, sf3_n3=0.5,
        sf3_a=1.0, sf3_b=1.0, sf3_scale=1.0,
        helix_r=0.4, helix_pitch=0.3, helix_turns=3.0,
        lissajous3d_Ax=1.0, lissajous3d_Ay=1.0, lissajous3d_Az=1.0,
        lissajous3d_wx=3.0, lissajous3d_wy=2.0, lissajous3d_wz=5.0,
        lissajous3d_phi=0.0,
        viviani_a=1.0,
        lic_N=12, lic_steps=180, lic_h=0.05,
        stream_N=12, stream_steps=220,
        geo_graph_level=2,
        rgg_nodes=400, rgg_radius=0.2,
        rings_count=5, ring_points=96,
        hex_step=0.2, hex_nx=12, hex_ny=12,
        voronoi_N=50, voronoi_bbox="-1,1,-1,1"
    ),
    appearance=dict(
        color="#00C8FF", colors="#00C8FF@0,#FFFFFF@1", opacity=1.0, px=2.0,
        palette="uniform", paletteK=2,
        h0=200.0, dh=0.0, wh=0.0,
        blendMode="source-over", shape="circle",
        alphaDepth=0.0,
        noiseScale=1.0, noiseSpeed=0.0,
        pxModMode="none", pxModAmp=0.0, pxModFreq=0.0, pxModPhaseDeg=0.0,
    ),
    dynamics=dict(
        rotX=0.0, rotY=0.0, rotZ=0.0,
        rotXMax=360.0, rotYMax=360.0, rotZMax=360.0,
        orientXDeg=0.0, orientYDeg=0.0, orientZDeg=0.0,
        pulseA=0.0, pulseW=1.0,
        pulsePhaseDeg=0.0, rotPhaseDeg=0.0, rotPhaseMode="none",
        orientationSnapAngles=[-180, -135, -120, -90, -60, -45, -30, -15, 0, 15, 30, 45, 60, 90, 120, 135, 180],
        phaseSnapAngles=[0, 30, 45, 60, 90, 120, 135, 150, 180, 210, 225, 240, 270, 300, 315, 330, 360]
    ),
    distribution=dict(
        densityMode="uniform",
        sampler="direct",
        dmin=0.0,
        dmin_px=0.0,
        maskMode="none",
        maskSoftness=0.2,
        maskAnimate=0.0,
        noiseDistortion=0.0,
        densityPulse=0.0,
        clusterCount=1,
        clusterSpread=0.0,
        repelForce=0.0,
        noiseWarp=0.0,
        fieldFlow=0.0,
        pr="uniform_area"
    ),
    mask=dict(
        enabled=False, mode="none", angleDeg=30.0,
        bandHalfDeg=20.0, lonCenterDeg=0.0, lonWidthDeg=30.0,
        softDeg=10.0, invert=False
    ),
    system=dict(Nmax=50000, dprClamp=2.0, depthSort=True, transparent=True),
    controller=dict(
        enabled=False,
        waveform="sine",
        amplitude=0.5,
        frequency=0.5,
        phaseDeg=0.0,
        offset=0.0,
        smoothing=0.5,
        pushToTalk=False,
        selected=[],
        audioGain=1.0,
    ),
)

PROFILE_PRESETS = {}


PROFILE_PRESET_DESCRIPTIONS = {}



SUBPROFILE_PRESETS = dict(
    camera=[
        dict(
            category="Angles classiques",
            items={
                "Orbite lente": dict(
                    camRadius=4.5,
                    camHeightDeg=20,
                    camTiltDeg=-5,
                    omegaDegPerSec=10,
                    fov=520,
                ),
                "Équatorial équilibré": dict(
                    camRadius=5.0,
                    camHeightDeg=0,
                    camTiltDeg=0,
                    omegaDegPerSec=18,
                    fov=560,
                ),
                "Orbite polaire": dict(
                    camRadius=5.8,
                    camHeightDeg=68,
                    camTiltDeg=-30,
                    omegaDegPerSec=16,
                    fov=540,
                ),
            },
        ),
        dict(
            category="Mouvements dynamiques",
            items={
                "Panoramique rapide": dict(
                    camRadius=5.8,
                    camHeightDeg=38,
                    camTiltDeg=-18,
                    omegaDegPerSec=36,
                    fov=660,
                ),
                "Spirale orbitale": dict(
                    camRadius=4.3,
                    camHeightDeg=52,
                    camTiltDeg=-24,
                    omegaDegPerSec=30,
                    fov=640,
                ),
                "Survol express": dict(
                    camRadius=3.6,
                    camHeightDeg=26,
                    camTiltDeg=-12,
                    omegaDegPerSec=50,
                    fov=620,
                ),
            },
        ),
        dict(
            category="Focus rapproché",
            items={
                "Macro orbitale": dict(
                    camRadius=2.4,
                    camHeightDeg=12,
                    camTiltDeg=-8,
                    omegaDegPerSec=14,
                    fov=420,
                ),
                "Détail tournant": dict(
                    camRadius=1.9,
                    camHeightDeg=18,
                    camTiltDeg=-10,
                    omegaDegPerSec=26,
                    fov=360,
                ),
                "Plongée contrôlée": dict(
                    camRadius=2.8,
                    camHeightDeg=40,
                    camTiltDeg=-22,
                    omegaDegPerSec=18,
                    fov=460,
                ),
            },
        ),
        dict(
            category="Plans cinématiques",
            items={
                "Travelling latéral": dict(
                    camRadius=4.8,
                    camHeightDeg=10,
                    camTiltDeg=-4,
                    omegaDegPerSec=26,
                    fov=580,
                ),
                "Montée dramatique": dict(
                    camRadius=5.4,
                    camHeightDeg=72,
                    camTiltDeg=-40,
                    omegaDegPerSec=20,
                    fov=600,
                ),
                "Balayage circulaire": dict(
                    camRadius=4.6,
                    camHeightDeg=18,
                    camTiltDeg=-6,
                    omegaDegPerSec=32,
                    fov=540,
                ),
            },
        ),
    ],
    geometry=[
        dict(
            category="Sphères & nuages",
            items={
                "Fibonacci dense": dict(
                    topology="fibo_sphere",
                    N=4800,
                    R=1.25,
                    phi_g=2.3999632,
                ),
                "Spirale dorée": dict(
                    topology="vogel_sphere_spiral",
                    N=3600,
                    vogel_k=2.3999632,
                    R=1.2,
                ),
                "Sphère bruitée": dict(
                    topology="noisy_sphere",
                    R=1.1,
                    lat=96,
                    lon=96,
                    noisy_amp=0.22,
                    noisy_freq=3.2,
                    noisy_gain=1.3,
                    noisy_omega=24.0,
                ),
                "Harmoniques sphériques": dict(
                    topology="spherical_harmonics",
                    R=1.05,
                    lat=80,
                    lon=120,
                    sph_terms="2,0,0.45;4,3,0.25",
                ),
            },
        ),
        dict(
            category="Polyèdres & géodésiques",
            items={
                "Icosaèdre filaire": dict(
                    topology="icosahedron",
                    R=1.0,
                    poly_layers=2,
                    poly_link_steps=3,
                ),
                "Géode raffinée": dict(
                    topology="geodesic_sphere",
                    R=1.1,
                    geo_level=3,
                ),
                "Tronqué équilibré": dict(
                    topology="truncated_icosa",
                    R=1.0,
                    trunc_ratio=0.32,
                    poly_layers=2,
                    poly_link_steps=2,
                ),
                "Stellation scintillante": dict(
                    topology="stellated_icosa",
                    R=1.0,
                    stellated_scale=1.7,
                    poly_layers=3,
                    poly_link_steps=1,
                ),
            },
        ),
        dict(
            category="Tore & rubans",
            items={
                "Tore équilibré": dict(
                    topology="torus",
                    R=1.0,
                    R_major=1.1,
                    r_minor=0.38,
                    lat=72,
                    lon=128,
                ),
                "Double tore": dict(
                    topology="double_torus",
                    R=1.0,
                    R_major=1.25,
                    R_major2=0.85,
                    r_minor=0.32,
                    lat=72,
                    lon=128,
                ),
                "Nœud (3,2)": dict(
                    topology="torus_knot",
                    R=1.0,
                    N=2400,
                    R_major=1.2,
                    r_minor=0.22,
                    torus_knot_p=3,
                    torus_knot_q=2,
                ),
                "Ruban de Möbius": dict(
                    topology="mobius",
                    R=1.0,
                    lat=120,
                    lon=256,
                    mobius_w=0.5,
                ),
            },
        ),
        dict(
            category="Plans & motifs",
            items={
                "Phyllotaxie serrée": dict(
                    topology="disk_phyllotaxis",
                    R=1.0,
                    N=2600,
                    phi_g=2.3999632,
                ),
                "Anneaux concentriques": dict(
                    topology="concentric_rings",
                    R=1.0,
                    rings_count=9,
                    ring_points=96,
                ),
                "Pavage hexagonal": dict(
                    topology="hex_packing_plane",
                    R=1.0,
                    hex_step=0.18,
                    hex_nx=14,
                    hex_ny=14,
                ),
                "Disque Poisson": dict(
                    topology="poisson_disk",
                    R=1.0,
                    N=2800,
                    poisson_dmin=0.07,
                ),
            },
        ),
        dict(
            category="Courbes & flux",
            items={
                "Hélice aérienne": dict(
                    topology="helix",
                    R=1.0,
                    N=2000,
                    helix_r=0.55,
                    helix_pitch=0.45,
                    helix_turns=5.5,
                ),
                "Flux Viviani": dict(
                    topology="viviani_curve",
                    R=1.0,
                    N=2200,
                    viviani_a=1.15,
                ),
                "Courbe Lissajous": dict(
                    topology="lissajous3d",
                    R=1.0,
                    N=2600,
                    lissajous3d_Ax=1.2,
                    lissajous3d_Ay=0.9,
                    lissajous3d_Az=1.0,
                    lissajous3d_wx=3.0,
                    lissajous3d_wy=4.0,
                    lissajous3d_wz=5.0,
                    lissajous3d_phi=45.0,
                ),
                "Flux sur tore": dict(
                    topology="stream_on_torus",
                    R=1.0,
                    stream_N=18,
                    stream_steps=280,
                    R_major=1.2,
                    r_minor=0.35,
                ),
            },
        ),
        dict(
            category="Surfaces implicites",
            items={
                "Superformule sculptée": dict(
                    topology="superformula_3D",
                    R=1.0,
                    lat=96,
                    lon=96,
                    sf3_m1=4.0,
                    sf3_m2=6.0,
                    sf3_m3=2.0,
                    sf3_n1=0.4,
                    sf3_n2=1.2,
                    sf3_n3=1.6,
                    sf3_a=1.0,
                    sf3_b=1.0,
                    sf3_scale=1.05,
                ),
                "Gyroïde fin": dict(
                    topology="gyroid",
                    R=1.0,
                    N=4200,
                    gyroid_scale=1.3,
                    gyroid_thickness=0.08,
                    gyroid_c=0.15,
                ),
                "Schwarz P": dict(
                    topology="schwarz_P",
                    R=1.0,
                    N=3600,
                    schwarz_scale=1.2,
                    schwarz_iso=0.08,
                ),
                "Metaballs organiques": dict(
                    topology="metaballs",
                    R=1.0,
                    N=3800,
                    metaballs_centers="0,0,0;0.6,0,0;-0.6,0,0",
                    metaballs_radii="0.55;0.35;0.35",
                    metaballs_iso=1.1,
                ),
            },
        ),
    ],
    appearance=[
        dict(
            category="Éclats lumineux",
            items={
                "Néon cyan": dict(
                    color="#00f5ff",
                    opacity=0.88,
                    palette="uniform",
                    px=1.5,
                    blendMode="screen",
                ),
                "Halo électrique": dict(
                    colors="#1a9dff@0,#8cf9ff@0.6,#fff4d6@1",
                    palette="gradient_linear",
                    opacity=0.78,
                    px=1.8,
                    blendMode="lighter",
                ),
                "Laser magenta": dict(
                    color="#ff3df5",
                    opacity=0.9,
                    palette="hsl_time",
                    wh=0.7,
                    px=1.2,
                    blendMode="screen",
                ),
                "Astre doré": dict(
                    colors="#ffb347@0,#fff6d9@1",
                    palette="gradient_radial",
                    opacity=0.82,
                    px=2.0,
                    blendMode="screen",
                ),
            },
        ),
        dict(
            category="Pastels & doux",
            items={
                "Pastel aquarelle": dict(
                    colors="#ff9ad5@0,#8dd6ff@1",
                    palette="gradient_linear",
                    opacity=0.66,
                    px=2.6,
                ),
                "Aurore boréale": dict(
                    colors="#5ee7ff@0,#a77dff@0.5,#ffe2ff@1",
                    palette="gradient_radial",
                    opacity=0.74,
                    px=2.3,
                    alphaDepth=0.14,
                ),
                "Coquillage": dict(
                    colors="#ffd1ba@0,#f6f1ff@1",
                    palette="gradient_linear",
                    opacity=0.7,
                    px=3.0,
                    blendMode="lighter",
                ),
                "Brume pêche": dict(
                    color="#ffe1c6",
                    opacity=0.6,
                    palette="every_other",
                    paletteK=3,
                    px=2.4,
                ),
            },
        ),
        dict(
            category="Contrastes & profondeur",
            items={
                "Fumée contrastée": dict(
                    color="#fefefe",
                    palette="every_other",
                    paletteK=2,
                    px=2.8,
                    opacity=0.58,
                    blendMode="multiply",
                    alphaDepth=0.22,
                ),
                "Glitch sombre": dict(
                    colors="#0d1b2a@0,#1b263b@0.5,#f9f7f3@1",
                    palette="gradient_linear",
                    opacity=0.78,
                    px=2.1,
                    noiseScale=1.5,
                    noiseSpeed=0.45,
                ),
                "Métal bleu nuit": dict(
                    color="#8fb9ff",
                    palette="stripe_longitude",
                    px=2.3,
                    opacity=0.68,
                    blendMode="screen",
                ),
                "Inversion argentée": dict(
                    colors="#ffffff@0,#101820@1",
                    palette="gradient_linear",
                    opacity=0.72,
                    px=1.9,
                    blendMode="screen",
                ),
            },
        ),
        dict(
            category="Chromies animées",
            items={
                "Latitude polaire": dict(
                    palette="by_lat",
                    h0=200.0,
                    dh=90.0,
                    wh=0.8,
                    opacity=0.8,
                    px=2.0,
                ),
                "Longitude solaire": dict(
                    palette="by_lon",
                    h0=40.0,
                    dh=160.0,
                    wh=0.6,
                    opacity=0.82,
                    px=2.1,
                ),
                "Bruit chromatique": dict(
                    palette="by_noise",
                    colors="#ff6f61@0,#5df2ff@1",
                    noiseScale=1.8,
                    noiseSpeed=0.6,
                    opacity=0.76,
                    px=2.4,
                ),
                "Flux directionnel": dict(
                    palette="directional",
                    h0=120.0,
                    dh=60.0,
                    wh=1.1,
                    opacity=0.72,
                    px=2.2,
                ),
            },
        ),
        dict(
            category="Variations de taille",
            items={
                "Vagues indexées": dict(
                    palette="random_from_list",
                    colors="#ffe066@0,#ff6b6b@0.5,#4d96ff@1",
                    opacity=0.74,
                    px=2.2,
                    pxModMode="by_index",
                    pxModAmp=0.35,
                    pxModFreq=0.6,
                    pxModPhaseDeg=45.0,
                ),
                "Respiration radiale": dict(
                    color="#9cf6ff",
                    opacity=0.78,
                    px=2.6,
                    pxModMode="by_radius",
                    pxModAmp=0.4,
                    pxModFreq=0.9,
                    pxModPhaseDeg=90.0,
                ),
                "Impulsions pastel": dict(
                    colors="#f6d0ff@0,#a4ebff@1",
                    palette="gradient_linear",
                    opacity=0.7,
                    px=2.8,
                    pxModMode="by_index",
                    pxModAmp=0.28,
                    pxModFreq=0.8,
                ),
                "Granulation douce": dict(
                    color="#ffffff",
                    opacity=0.64,
                    px=2.0,
                    pxModMode="by_radius",
                    pxModAmp=0.22,
                    pxModFreq=0.5,
                    pxModPhaseDeg=30.0,
                ),
            },
        ),
    ],
    dynamics=[
        dict(
            category="Rotations fluides",
            items={
                "Spirale douce": dict(
                    rotX=12.0,
                    rotY=18.0,
                    rotZ=0.0,
                    rotPhaseMode="by_index",
                    rotPhaseDeg=60.0,
                    pulseA=0.08,
                    pulseW=1.2,
                ),
                "Flux circulaire": dict(
                    rotX=8.0,
                    rotY=24.0,
                    rotZ=12.0,
                    rotPhaseMode="by_radius",
                    rotPhaseDeg=90.0,
                    pulseA=0.04,
                    pulseW=0.8,
                ),
                "Orbite lente": dict(
                    rotX=0.0,
                    rotY=16.0,
                    rotZ=22.0,
                    rotPhaseMode="golden_spiral",
                    rotPhaseDeg=75.0,
                    pulseA=0.06,
                    pulseW=1.0,
                ),
                "Tourbillon équilibré": dict(
                    rotX=14.0,
                    rotY=14.0,
                    rotZ=14.0,
                    rotPhaseMode="by_longitude",
                    rotPhaseDeg=80.0,
                    pulseA=0.05,
                    pulseW=1.1,
                ),
            },
        ),
        dict(
            category="Rotations rapides",
            items={
                "Gyre énergique": dict(
                    rotX=48.0,
                    rotY=36.0,
                    rotZ=0.0,
                    rotPhaseMode="checkerboard",
                    rotPhaseDeg=120.0,
                    pulseA=0.1,
                    pulseW=1.4,
                ),
                "Tempête radiale": dict(
                    rotX=0.0,
                    rotY=64.0,
                    rotZ=48.0,
                    rotPhaseMode="alternate_rings",
                    rotPhaseDeg=160.0,
                    pulseA=0.12,
                    pulseW=1.8,
                ),
                "Rotor chaotique": dict(
                    rotX=52.0,
                    rotY=52.0,
                    rotZ=28.0,
                    rotPhaseMode="lat_lon_checker",
                    rotPhaseDeg=150.0,
                    pulseA=0.08,
                    pulseW=2.0,
                ),
                "Vibration rapide": dict(
                    rotX=36.0,
                    rotY=0.0,
                    rotZ=68.0,
                    rotPhaseMode="random",
                    rotPhaseDeg=210.0,
                    pulseA=0.14,
                    pulseW=2.4,
                ),
            },
        ),
        dict(
            category="Respirations sculptées",
            items={
                "Souffle lent": dict(
                    rotX=0.0,
                    rotY=0.0,
                    rotZ=24.0,
                    pulseA=0.22,
                    pulseW=0.6,
                    pulsePhaseDeg=45.0,
                    rotPhaseMode="none",
                    rotPhaseDeg=0.0,
                ),
                "Battement profond": dict(
                    rotX=18.0,
                    rotY=12.0,
                    rotZ=0.0,
                    pulseA=0.28,
                    pulseW=0.9,
                    pulsePhaseDeg=90.0,
                    rotPhaseMode="by_radius",
                    rotPhaseDeg=45.0,
                ),
                "Respiration spirale": dict(
                    rotX=10.0,
                    rotY=26.0,
                    rotZ=10.0,
                    pulseA=0.24,
                    pulseW=1.2,
                    pulsePhaseDeg=135.0,
                    rotPhaseMode="golden_spiral",
                    rotPhaseDeg=90.0,
                ),
                "Onde inversée": dict(
                    rotX=0.0,
                    rotY=30.0,
                    rotZ=30.0,
                    pulseA=0.2,
                    pulseW=1.0,
                    pulsePhaseDeg=180.0,
                    rotPhaseMode="cluster_wave",
                    rotPhaseDeg=110.0,
                ),
            },
        ),
        dict(
            category="Déphasages structurés",
            items={
                "Quadrillage lat/lon": dict(
                    rotX=24.0,
                    rotY=24.0,
                    rotZ=24.0,
                    rotPhaseMode="lat_lon_checker",
                    rotPhaseDeg=140.0,
                    orientXDeg=10,
                    orientYDeg=0,
                    orientZDeg=0,
                ),
                "Anneaux alternés": dict(
                    rotX=30.0,
                    rotY=18.0,
                    rotZ=0.0,
                    rotPhaseMode="alternate_rings",
                    rotPhaseDeg=120.0,
                    orientXDeg=0,
                    orientYDeg=18,
                    orientZDeg=0,
                ),
                "Bruit volumique": dict(
                    rotX=20.0,
                    rotY=40.0,
                    rotZ=12.0,
                    rotPhaseMode="noise3d",
                    rotPhaseDeg=160.0,
                    orientXDeg=0,
                    orientYDeg=0,
                    orientZDeg=12,
                ),
                "Spirale dorée": dict(
                    rotX=16.0,
                    rotY=28.0,
                    rotZ=16.0,
                    rotPhaseMode="golden_spiral",
                    rotPhaseDeg=180.0,
                    orientXDeg=5,
                    orientYDeg=15,
                    orientZDeg=0,
                ),
            },
        ),
        dict(
            category="Orientations fixes",
            items={
                "Alignement X+": dict(
                    rotX=18.0,
                    rotY=0.0,
                    rotZ=0.0,
                    orientXDeg=45,
                    orientYDeg=0,
                    orientZDeg=0,
                    rotPhaseMode="by_index",
                    rotPhaseDeg=90.0,
                ),
                "Tilt YZ": dict(
                    rotX=0.0,
                    rotY=18.0,
                    rotZ=18.0,
                    orientXDeg=0,
                    orientYDeg=30,
                    orientZDeg=45,
                    rotPhaseMode="checkerboard",
                    rotPhaseDeg=110.0,
                ),
                "Alignement oblique": dict(
                    rotX=12.0,
                    rotY=12.0,
                    rotZ=24.0,
                    orientXDeg=25,
                    orientYDeg=-15,
                    orientZDeg=35,
                    rotPhaseMode="cluster_wave",
                    rotPhaseDeg=130.0,
                ),
                "Pivot vertical": dict(
                    rotX=0.0,
                    rotY=32.0,
                    rotZ=0.0,
                    orientXDeg=-30,
                    orientYDeg=0,
                    orientZDeg=0,
                    rotPhaseMode="by_longitude",
                    rotPhaseDeg=100.0,
                ),
            },
        ),
    ],
    distribution=[
        dict(
            category="Répartition uniforme",
            items={
                "Uniforme direct": dict(
                    densityMode="uniform",
                    sampler="direct",
                    dmin=0.0,
                    dmin_px=0.0,
                    maskMode="none",
                    densityPulse=0.0,
                    noiseWarp=0.0,
                ),
                "Uniforme blue-noise": dict(
                    densityMode="uniform",
                    sampler="blue_noise",
                    dmin=0.08,
                    dmin_px=0.0,
                    maskMode="none",
                    repelForce=0.2,
                ),
                "Uniforme pondéré": dict(
                    densityMode="uniform",
                    sampler="weighted_sampling",
                    dmin=0.04,
                    dmin_px=0.0,
                    maskMode="none",
                    densityPulse=0.1,
                    noiseWarp=0.2,
                ),
            },
        ),
        dict(
            category="Centres & bords",
            items={
                "Cœur dense": dict(
                    densityMode="centered",
                    sampler="blue_noise",
                    dmin=0.05,
                    dmin_px=12.0,
                    maskMode="none",
                    repelForce=0.3,
                ),
                "Anneau périphérique": dict(
                    densityMode="edges",
                    sampler="direct",
                    dmin=0.02,
                    dmin_px=6.0,
                    maskMode="none",
                ),
                "Gradient périphérique": dict(
                    densityMode="edges",
                    sampler="weighted_sampling",
                    dmin=0.05,
                    dmin_px=10.0,
                    maskMode="north_cap",
                    maskSoftness=0.35,
                    maskAnimate=0.0,
                ),
            },
        ),
        dict(
            category="Bruit & champs",
            items={
                "Bruit doux": dict(
                    densityMode="noise_field",
                    sampler="weighted_sampling",
                    dmin=0.04,
                    dmin_px=8.0,
                    maskMode="none",
                    noiseDistortion=0.5,
                    noiseWarp=0.3,
                ),
                "Flux vectoriel": dict(
                    densityMode="noise_field",
                    sampler="blue_noise",
                    dmin=0.06,
                    dmin_px=10.0,
                    maskMode="none",
                    fieldFlow=1.2,
                    noiseWarp=0.4,
                ),
                "Impulsions bruitées": dict(
                    densityMode="noise_field",
                    sampler="direct",
                    dmin=0.02,
                    dmin_px=6.0,
                    maskMode="random_patch",
                    maskSoftness=0.4,
                    maskAnimate=0.8,
                    densityPulse=0.3,
                ),
            },
        ),
        dict(
            category="Clusters & masques",
            items={
                "Constellations": dict(
                    densityMode="uniform",
                    sampler="blue_noise",
                    dmin=0.05,
                    dmin_px=14.0,
                    clusterCount=6,
                    clusterSpread=0.42,
                    maskMode="north_cap",
                    maskSoftness=0.25,
                ),
                "Bande équatoriale": dict(
                    densityMode="centered",
                    sampler="direct",
                    dmin=0.03,
                    dmin_px=8.0,
                    maskMode="band",
                    maskSoftness=0.3,
                    maskAnimate=0.5,
                ),
                "Patchs aléatoires": dict(
                    densityMode="uniform",
                    sampler="weighted_sampling",
                    dmin=0.02,
                    dmin_px=5.0,
                    maskMode="random_patch",
                    maskSoftness=0.45,
                    maskAnimate=1.1,
                    clusterCount=8,
                    clusterSpread=0.5,
                ),
            },
        ),
    ],
    mask=[
        dict(
            category="Coupes polaires",
            items={
                "Calotte nord douce": dict(
                    enabled=True,
                    mode="north_cap",
                    angleDeg=38.0,
                    softDeg=12.0,
                    invert=False,
                ),
                "Calotte sud inversée": dict(
                    enabled=True,
                    mode="south_cap",
                    angleDeg=34.0,
                    softDeg=10.0,
                    invert=True,
                ),
            },
        ),
        dict(
            category="Bandes",
            items={
                "Bande équatoriale": dict(
                    enabled=True,
                    mode="equatorial_band",
                    bandHalfDeg=22.0,
                    softDeg=8.0,
                ),
                "Bandes jumelles": dict(
                    enabled=True,
                    mode="longitudinal_band",
                    lonCenterDeg=45.0,
                    lonWidthDeg=40.0,
                    softDeg=10.0,
                ),
            },
        ),
        dict(
            category="Masques dynamiques",
            items={
                "Ouverture douce": dict(
                    enabled=True,
                    mode="north_cap",
                    angleDeg=48.0,
                    softDeg=18.0,
                    invert=False,
                ),
                "Fenêtre inversée": dict(
                    enabled=True,
                    mode="equatorial_band",
                    bandHalfDeg=28.0,
                    softDeg=12.0,
                    invert=True,
                ),
            },
        ),
    ],
    system=[
        dict(
            category="Performances",
            items={
                "Optimisé 25k": dict(
                    Nmax=25000,
                    dprClamp=1.5,
                    depthSort=True,
                    transparent=True,
                ),
                "Qualité 50k": dict(
                    Nmax=50000,
                    dprClamp=2.0,
                    depthSort=True,
                    transparent=True,
                ),
            },
        ),
        dict(
            category="Expérimentations",
            items={
                "Dense 80k": dict(
                    Nmax=80000,
                    dprClamp=2.5,
                    depthSort=False,
                    transparent=True,
                ),
                "Opaque rapide": dict(
                    Nmax=40000,
                    dprClamp=1.2,
                    depthSort=False,
                    transparent=False,
                ),
            },
        ),
    ],
)


TOOLTIPS = {
    "camera.camRadius":"Détermine la distance entre la caméra et le centre de la scène.",
    "camera.camHeightDeg":"Place la caméra plus haut ou plus bas sur son orbite.",
    "camera.camTiltDeg":"Incline la caméra vers le haut ou vers le bas.",
    "camera.omegaDegPerSec":"Fait tourner automatiquement la caméra autour de la scène.",
    "camera.fov":"Contrôle l’angle de vue : petit pour zoomer, grand pour élargir.",
    "geometry.topology":"Sélectionne la forme de base utilisée pour disposer les particules.",
    "geometry.R":"Agrandit ou réduit toute la forme sans changer sa structure.",
    "geometry.lat":"Nombre de bandes horizontales utilisées pour dessiner la forme.",
    "geometry.lon":"Nombre de colonnes verticales utilisées pour dessiner la forme.",
    "geometry.N":"Nombre total de points générés pour les distributions spirales.",
    "geometry.phi_g":"Décalage progressif entre les points pour les spirales naturelles.",
    "geometry.R_major":"Rayon extérieur du tore.",
    "geometry.r_minor":"Épaisseur du tube du tore.",
    "geometry.eps1":"Arrondi la forme superquadrique sur l’axe horizontal.",
    "geometry.eps2":"Arrondi la forme superquadrique sur l’axe vertical.",
    "geometry.ax":"Étire la superquadrique sur l’axe X.",
    "geometry.ay":"Étire la superquadrique sur l’axe Y.",
    "geometry.az":"Étire la superquadrique sur l’axe Z.",
    "geometry.geo_level":"Affinage du maillage de l’icosaèdre.",
    "geometry.mobius_w":"Largeur du ruban pour la bande de Möbius.",
    "geometry.trunc_ratio":"Fraction d’arête conservée avant le biseau des sommets de l’icosaèdre tronqué.",
    "geometry.stellated_scale":"Allongement des pointes projetées à partir des faces de l’icosaèdre.",
    "geometry.arch_a":"Contrôle le rayon de départ de la spirale d’Archimède.",
    "geometry.arch_b":"Définit l’écartement entre les spires de la spirale d’Archimède.",
    "geometry.theta_max":"Angle total parcouru par les spirales planes.",
    "geometry.log_a":"Facteur d’échelle initiale de la spirale logarithmique.",
    "geometry.log_b":"Taux de croissance exponentielle de la spirale logarithmique.",
    "geometry.rose_k":"Nombre de pétales de la rosace polaire.",
    "geometry.sf2_m":"Paramètre m de la superformule 2D (symétries).",
    "geometry.sf2_a":"Paramètre a de la superformule 2D (échelle horizontale).",
    "geometry.sf2_b":"Paramètre b de la superformule 2D (échelle verticale).",
    "geometry.sf2_n1":"Exposant n1 de la superformule 2D.",
    "geometry.sf2_n2":"Exposant n2 de la superformule 2D.",
    "geometry.sf2_n3":"Exposant n3 de la superformule 2D.",
    "geometry.density_pdf":"Fonction de densité radiale utilisée pour répartir les points sur le disque.",
    "geometry.poisson_dmin":"Distance minimale entre deux points du disque de Poisson.",
    "geometry.lissajous_a":"Fréquence horizontale de la courbe de Lissajous plane.",
    "geometry.lissajous_b":"Fréquence verticale de la courbe de Lissajous plane.",
    "geometry.lissajous_phase":"Décalage de phase (rad) pour la courbe de Lissajous plane.",
    "geometry.vogel_k":"Facteur de rotation entre deux points successifs sur la spirale sphérique.",
    "geometry.se_n1":"Exposant n1 de la superellipsoïde.",
    "geometry.se_n2":"Exposant n2 de la superellipsoïde.",
    "geometry.half_height":"Facteur d’écrasement de la demi-sphère.",
    "geometry.noisy_amp":"Amplitude du bruit radial appliqué à la sphère.",
    "geometry.noisy_freq":"Fréquence du bruit sphérique.",
    "geometry.noisy_gain":"Gain multiplicatif du bruit fractal.",
    "geometry.noisy_omega":"Déphasage angulaire du bruit sphérique.",
    "geometry.sph_terms":"Liste de termes l,m,amplitude pour les harmoniques sphériques (format l,m,a).",
    "geometry.weight_map":"Expression pondérant la densité de points sur la sphère (variables theta,phi).",
    "geometry.R_major2":"Rayon majeur du second tore concentrique.",
    "geometry.torus_knot_p":"Nombre d’enroulements autour de l’axe majeur du nœud torique.",
    "geometry.torus_knot_q":"Nombre d’enroulements autour du tube du nœud torique.",
    "geometry.strip_w":"Largeur du ruban torsadé.",
    "geometry.strip_n":"Nombre de torsions complètes du ruban.",
    "geometry.blob_noise_amp":"Amplitude de la perturbation bruitée d’un blob.",
    "geometry.blob_noise_scale":"Échelle spatiale du bruit appliqué au blob.",
    "geometry.gyroid_scale":"Échelle spatiale de la surface de gyroid.",
    "geometry.gyroid_thickness":"Épaisseur de la coquille autour de l’isosurface du gyroid.",
    "geometry.gyroid_c":"Décalage de l’iso-valeur du gyroid.",
    "geometry.schwarz_scale":"Échelle de la surface minimale de Schwarz.",
    "geometry.schwarz_iso":"Valeur iso utilisée pour l’extraction de la surface de Schwarz.",
    "geometry.heart_scale":"Échelle globale de la forme de cœur implicite.",
    "geometry.polyhedron_data":"Définition personnalisée d’un polyèdre (JSON vertices/faces).",
    "geometry.poly_layers":"Nombre de couches concentriques générées entre le centre et la surface pour densifier les polyèdres.",
    "geometry.poly_link_steps":"Nombre de points interpolés sur chaque arête pour tracer des segments entre les sommets du polyèdre.",
    "geometry.metaballs_centers":"Liste des centres des métaballes (x,y,z séparés par des virgules).",
    "geometry.metaballs_radii":"Rayons associés aux métaballes (séparés par des virgules).",
    "geometry.metaballs_iso":"Seuil iso-surface pour les métaballes.",
    "geometry.df_ops":"Script de combinaisons SDF (sphere(r), box(x,y,z), union(a,b), sub(a,b), etc.).",
    "geometry.sf3_m1":"Paramètre m1 de la superformule 3D.",
    "geometry.sf3_m2":"Paramètre m2 de la superformule 3D.",
    "geometry.sf3_m3":"Paramètre m3 de la superformule 3D.",
    "geometry.sf3_n1":"Exposant n1 de la superformule 3D.",
    "geometry.sf3_n2":"Exposant n2 de la superformule 3D.",
    "geometry.sf3_n3":"Exposant n3 de la superformule 3D.",
    "geometry.sf3_a":"Paramètre a (échelle latitude) de la superformule 3D.",
    "geometry.sf3_b":"Paramètre b (échelle longitude) de la superformule 3D.",
    "geometry.sf3_scale":"Facteur global appliqué à la superformule 3D.",
    "geometry.helix_r":"Rayon de l’hélice 3D.",
    "geometry.helix_pitch":"Pas vertical de l’hélice par tour.",
    "geometry.helix_turns":"Nombre de tours de l’hélice.",
    "geometry.lissajous3d_Ax":"Amplitude suivant X pour la courbe de Lissajous 3D.",
    "geometry.lissajous3d_Ay":"Amplitude suivant Y pour la courbe de Lissajous 3D.",
    "geometry.lissajous3d_Az":"Amplitude suivant Z pour la courbe de Lissajous 3D.",
    "geometry.lissajous3d_wx":"Fréquence suivant X de la courbe de Lissajous 3D.",
    "geometry.lissajous3d_wy":"Fréquence suivant Y de la courbe de Lissajous 3D.",
    "geometry.lissajous3d_wz":"Fréquence suivant Z de la courbe de Lissajous 3D.",
    "geometry.lissajous3d_phi":"Décalage de phase commun des composantes de Lissajous 3D.",
    "geometry.viviani_a":"Rayon du tore générateur de la courbe de Viviani.",
    "geometry.lic_N":"Nombre de lignes intégrées sur la sphère.",
    "geometry.lic_steps":"Nombre d’étapes d’intégration pour chaque ligne LIC.",
    "geometry.lic_h":"Pas de temps utilisé pour l’intégration LIC.",
    "geometry.stream_N":"Nombre de lignes intégrées sur le tore.",
    "geometry.stream_steps":"Nombre d’étapes pour l’intégration sur le tore.",
    "geometry.geo_graph_level":"Niveau de subdivision du graphe géodésique.",
    "geometry.rgg_nodes":"Nombre de points du graphe géométrique aléatoire.",
    "geometry.rgg_radius":"Distance de connexion pour le graphe géométrique aléatoire.",
    "geometry.rings_count":"Nombre d’anneaux concentriques générés.",
    "geometry.ring_points":"Nombre de points par anneau.",
    "geometry.hex_step":"Espacement entre les points du pavage hexagonal.",
    "geometry.hex_nx":"Nombre de colonnes du pavage hexagonal.",
    "geometry.hex_ny":"Nombre de lignes du pavage hexagonal.",
    "geometry.voronoi_N":"Nombre de graines utilisées pour le diagramme de Voronoï.",
    "geometry.voronoi_bbox":"Boîte englobante (xmin,xmax,ymin,ymax) pour les graines de Voronoï.",
    "appearance.color":"Couleur principale des particules.",
    "appearance.colors":"Couleurs listées avec leur position pour créer un dégradé personnalisé.",
    "appearance.opacity":"Rend les particules plus ou moins transparentes.",
    "appearance.px":"Taille moyenne des particules en pixels.",
    "appearance.palette":"Mode d’attribution des couleurs.",
    "appearance.paletteK":"Fréquence de répétition du motif dans les palettes répétées.",
    "appearance.blendMode":"Définit comment les particules se mélangent entre elles et avec le fond.",
    "appearance.shape":"Choix de la forme de chaque particule.",
    "appearance.alphaDepth":"Atténue la visibilité des particules éloignées.",
    "appearance.h0":"Couleur de départ pour les palettes HSL animées.",
    "appearance.dh":"Amplitude de variation de la couleur pour les palettes HSL.",
    "appearance.wh":"Vitesse à laquelle la couleur HSL change.",
    "appearance.noiseScale":"Taille des détails colorés générés par le bruit.",
    "appearance.noiseSpeed":"Vitesse d’animation de ces détails colorés.",
    "appearance.pxModMode":"Active les variations automatiques de taille.",
    "appearance.pxModAmp":"Amplitude maximale des variations de taille.",
    "appearance.pxModFreq":"Rythme de répétition des variations de taille.",
    "appearance.pxModPhaseDeg":"Décalage du motif de variation de taille.",
    "dynamics.rotX":"Fait tourner le nuage autour de l’axe horizontal X.",
    "dynamics.rotY":"Fait tourner le nuage autour de l’axe vertical Y.",
    "dynamics.rotZ":"Fait tourner le nuage autour de l’axe longitudinal Z.",
    "dynamics.pulseA":"Amplitude de l’effet de respiration.",
    "dynamics.pulseW":"Vitesse de l’effet de respiration.",
    "dynamics.pulsePhaseDeg":"Déphasage initial de l’animation de respiration.",
    "dynamics.rotPhaseMode":"Répartit un déphasage commun (rotations et respiration) via des progressions par index ou rayon, des alternances latitude/longitude, des damiers, du bruit volumique ou des structures spirales et de clusters.",
    "dynamics.rotPhaseDeg":"Amplitude maximale du déphasage appliqué, réglée depuis un cadran à crans personnalisables (multiples de π).",
    "distribution.densityMode":"Contrôle la pondération globale des points (uniforme, centre, bord, bruit).",
    "distribution.sampler":"Méthode de sous-échantillonnage à appliquer sur la géométrie générée.",
    "distribution.dmin":"Impose une distance minimale en 3D pour limiter les amas de points.",
    "distribution.dmin_px":"Évite que deux particules ne se projettent trop proches l’une de l’autre.",
    "dynamics.orientXDeg":"Incline la distribution autour de l’axe X en utilisant les crans configurables.",
    "dynamics.orientYDeg":"Pivote la distribution autour de l’axe vertical Y en s’alignant sur les crans définis.",
    "dynamics.orientZDeg":"Tourne la distribution autour de l’axe Z en s’accrochant aux angles personnalisés.",
    "distribution.maskMode":"Applique un masque spatial (calotte, bande, zone aléatoire).",
    "distribution.maskSoftness":"Élargit la transition du masque pour un bord plus doux.",
    "distribution.maskAnimate":"Anime le masque pour faire se déplacer la zone visible.",
    "distribution.noiseDistortion":"Déforme les positions selon un champ de bruit statique.",
    "distribution.densityPulse":"Fait pulser la distribution en contractant/étirant le nuage.",
    "distribution.clusterCount":"Nombre de groupes privilégiés pour la répartition.",
    "distribution.clusterSpread":"Détermine à quel point les points sont aspirés vers leurs centres de groupe.",
    "distribution.repelForce":"Force de répulsion locale pour lisser les amas restants.",
    "distribution.noiseWarp":"Amplitude de la déformation animée par le bruit.",
    "distribution.fieldFlow":"Intensité du champ de rotation appliqué aux positions.",
    "mask.enabled":"Active ou désactive le masquage des particules.",
    "mask.mode":"Définit la zone conservée ou masquée.",
    "mask.angleDeg":"Ouvre plus ou moins le masque en forme de calotte.",
    "mask.bandHalfDeg":"Largeur d’une demi-bande autour de l’équateur.",
    "mask.lonCenterDeg":"Centre le masque longitudinal.",
    "mask.lonWidthDeg":"Largeur totale du masque longitudinal.",
    "mask.softDeg":"Adoucit le bord du masque pour un fondu progressif.",
    "mask.invert":"Inverse la zone masquée et visible.",
    "system.Nmax":"Nombre maximum de particules autorisées simultanément.",
    "system.dprClamp":"Limite la résolution utilisée pour protéger les performances.",
    "system.depthSort":"Trie les particules pour un affichage correct avec la transparence.",
    "system.transparent":"Permet de rendre la fenêtre de prévisualisation transparente.",
    "controller.enabled":"Active ou désactive la modulation automatique des contrôles liés.",
    "controller.waveform":"Choisit la forme du signal appliqué aux paramètres liés.",
    "controller.amplitude":"Détermine l’intensité relative de la modulation autour du centre.",
    "controller.frequency":"Nombre d’oscillations complètes par seconde pour le signal choisi.",
    "controller.phaseDeg":"Décalage initial appliqué à la forme d’onde en degrés.",
    "controller.offset":"Décale le point central utilisé pour la modulation (fraction de la plage).",
    "controller.smoothing":"Interpole entre les valeurs successives pour adoucir la modulation.",
    "controller.pushToTalk":"Lorsque activé, la modulation n’est envoyée que pendant l’appui sur le bouton push-to-talk.",
    "controller.audioGain":"Amplifie ou atténue le niveau audio utilisé comme signal de contrôle.",
}
